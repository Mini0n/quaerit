# frozen_string_literal: true

require 'rails_helper'

# This spec was generated by rspec-rails when you ran the scaffold generator.
# It demonstrates how one might use RSpec to test the controller code that
# was generated by Rails when you ran the scaffold generator.
#
# It assumes that the implementation code is generated by the rails scaffold
# generator. If you are using any extension libraries to generate different
# controller code, this generated spec may or may not pass.
#
# It only uses APIs available in rails and/or rspec-rails. There are a number
# of tools you can use to make these specs even more expressive, but we're
# sticking to rails and rspec-rails APIs to keep things simple and stable.

RSpec.describe '/search', type: :request do
  # This should return the minimal set of attributes required to create a valid
  # Search. As you add validations to Search, be sure to
  # adjust the attributes here as well.
  let(:valid_params) do
    '?query=kabuto&offset=10&engines=1,2'
  end

  let(:invalid_params) do
    '?query=&engines=1,2'
  end

  describe 'GET /search' do
    it 'renders a successful response' do
      get search_url + valid_params, as: :json

      results = JSON.parse(response.body)['results']

      expect(response).to be_successful
      expect(results.size).to be 2
      expect(results[0]['engine']).to include(GoogleSearchEngine.name)
      expect(results[1]['engine']).to include(BingSearchEngine.name)
    end

    it 'renders an successful response' do
      get search_url + invalid_params, as: :json

      results = JSON.parse(response.body)

      expect(response).to be_successful
      expect(results.size).to be 1
      expect(results.keys.first).to be 'error'
    end
  end

  describe 'GET /' do
    it 'renders a successful response' do
      get '/', as: :json

      expect(response).to be_successful
      expect(response.body).to include('http://github.com/Mini0n/quaerit')
    end
  end
end
